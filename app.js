"use strict";

/*
  Приватные методы и свойства. Позволяет реализовать инкапсуляцию (скрытие) полей или методов
*/

class Car {
  /* К примеру хотим скрыть VIN номер машины. Будем использовать приватное поле */
  #vin = 6;
  speed;

  /* методы */
  #changeVin() {
    console.log("changed");
  }

  test() {
    this.#changeVin();
  }
  
  static #firld = 3;
}

const car = new Car();
// car.#vin; // ошибка, нет такого свойства

/* # много вызывала вопросов, связано с тем как работает и парсится код JS. Для облегчения задачу выявления приватных и публичных полей используется # */

/* Отличие приватных от публичных
  Публичные - доступны из вне
  Приватные - доступны только внутри
*/

car.test(); // Теперь #changeVin сработал и вывел changed

/* Так же так же работают статические методы и свойства */
// Car.#field() // недоступно

/* Ограничения приватных методов
  1. Извне никак не повлиять, изменить
  2. Ограничения наследования - дальше по курсу

  Что можно делать
  1. Не сможем удалить приватное свойство через delete
  2. Объявить в конструкторе приватное свойство и присвоить ему щзначение.Сначала нужно вне конструктора объявить его, затем в конструкторе уже можно присвоить ему значение.
*/

