'use strict';

/*
  Управление зависимостями

*/

/* dependencies - указываются все зависимости необходимые приложению для работы в продакшене

^1.3.2
^ - разрешено устанавливать любыве версии пакетов выше только на минор и фикс ( например 1.3.3, 1.4.0, 1.4.2 и тд).
1- мажорная, может содержать может при изменении содержать  break and chenges
3- минорная, содержит новые фичи
2 - фикс версия, исправление ошибок.

Так же орграничить версию можно с момощьюю ~, приблизительная версия (например 1.3.3, 1.3.4, 1.3.5 только на фикс)

"dependencies": {
    "axios": "^1.3.4"
  }



  package-lock.json - файл, описывающий текущие зависимости после установки. Обеспечивает точные версии при повторной установки

  P.s - одна из проблем npm, что при установке пакета с ним установятся и другие его различные зависимости ( и так далее по вложенности), а так же можно получить какой то низкоуровневый пакет, который может теоретически иметь уязвимость. Стараться минимизировать внешние зависимости 


  node_modules - папка, содержащая установленные пакеты в рамках зависимости. в гите они не нужны, добавлять в .gitignore

  При скачивании репозитория используются команды:
  npm instal
  npm ci
  *если есть файл package.json и package-lock.json, и нет необходимости обновлять зависимости версии пакетов использовать npm ci


  Безопасность пакетов
  audit - показывает проблемы с безопасностью, npm audit - инфо о зависимости

  npm audit fix --force   обновляет зависимости до версии где нет уязвимостей, не учитывает ^ и ~


  npm dedup - проверка на наличие дубликатов пакетов
  npm cache varify - верифицирует кэш, если есть проблемы с установкой зависимостей и т.д
  npm uni axios - удаление зависимостей (axios - пример)

  npm i -g rollup - глобальная установка -g зависимости
  npm uni -g rollup - глобальное удаление зависимости

 Утилиты для сборки, оптимизации, ts - лучше устанавливать в dev зависимости, глобальная установка не всегда лучшее решение
 npm i -D rollup

 "devDependencies": { 
    "rollup": "^3.20.2"
  }
  
  dependencies - для работы приложения
  devDependencies - для разработки приложения
  Т.е - например приложение соберем отправим и rollup больше не нужен, а axios для дальнейшей работы приложения нужен



  Области зависимости
  "peerDependencies": {} - пакет, зависит от другого пакета, при этом эта зависимость не нужна для разработки, нужна как модуль. Нужны если пишем собственныу пакеты для публикации в npm
  "peerDependenciesMeta": {} - опции для пакетов
  "optionalDependencies": {} - опциональные зависисотси, говорит хорошо если бы стоял пакет указанный в optionalDependencies, если не стоит ну и ладно :)
*/