'use strict';

/*
  Принципы Solid - нужны для корректного проектирования системы
  Solid - принципы, которые лежат в основае дизайна построения приложения в ООП. Как хорошо и првильно простроить приложение в ООП. Относятся больше к дизайну и архетектуре приложения, чем к фундаментальным вещам

  Принципы SOLID:
  1. S: Single Responsibility Principle (Принцип единой ответственности). - Класс должен быть ответственен лишь за что-то одно

  2. O: Open-Closed Principle (Принцип открытости-закрытости). Должны быть открыты для расширения, но не для модификации.

  3. L: Liskov Substitution Principle (Принцип подстановки Барбары Лисков).  Классы-наследники могли бы использоваться вместо родительских классов, от которых они образованы, не нарушая работу программы.

  4. I: Interface Segregation Principle (Принцип разделения интерфейса). Создавайте узкоспециализированные интерфейсы, предназначенные для конкретного клиента. Клиенты не должны зависеть от интерфейсов, которые они не используют.

  5. D: Dependency Inversion Principle (Принцип инверсии зависимостей). Модули верхних уровней не должны зависеть от модулей нижних уровней. Оба типа модулей должны зависеть от абстракций.
  Абстракции не должны зависеть от деталей. Детали должны зависеть от абстракций.


*/
