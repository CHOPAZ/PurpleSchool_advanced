'use strict';

/*
  Принципы Solid - нужны для корректного проектирования системы
  Solid - принципы, которые лежат в основае дизайна построения приложения в ООП. Как хорошо и првильно простроить приложение в ООП. Относятся больше к дизайну и архетектуре приложения, чем к фундаментальным вещам

  Принципы SOLID:
  4. I: Interface Segregation Principle (Принцип разделения интерфейса). Создавайте узкоспециализированные интерфейсы, предназначенные для конкретного клиента. Клиенты не должны зависеть от интерфейсов, которые они не используют.

  Классне должен зависить от методов, которые ему не нужны
*/

/* Плохой пример */

class Weapon {
  // оружие
  strike() {
    //удар
  }

  shoot() {
    //стрелять
  }
}

/* Реализация оружия */
class Rifle extends Weapon { // винтовка
  strike() {
    //неэффективно
  }

  shoot() {
    //...
  }
}

class Sword extends Weapon { // меч
  strike() {
    //эффективно
  }

  shoot() {
    // неверно, меч не стреляет
  }
}





/* Как поступть - необходимо минимизировать те вещи, которые будут в Weapon */

/* В weapon необходимо положить то, что дейцствительно будет нужно и винтовке и мячу */
class Weapon1 {
  /* Например, стоимость, метод чистки, нанесение урона */

  dealDamage() { // нанесение урона

  }
}

/* Реализация оружия */
class Rifle1 extends Weapon { // винтовка
  shoot() {
    this.dealDamage()
  }
}

class Sword1 extends Weapon { // меч
  strike() {
    this.dealDamage()
  }

}